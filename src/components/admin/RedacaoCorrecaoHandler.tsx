
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

export interface CorrecaoData {
  nota_c1: string;
  nota_c2: string;
  nota_c3: string;
  nota_c4: string;
  nota_c5: string;
  comentario_admin: string;
}

export interface RedacaoCorrecaoResult {
  success: boolean;
  notaTotal: number;
  redacaoId: string;
  error?: string;
}

export const useRedacaoCorrecaoHandler = () => {
  const { toast } = useToast();

  const validarPermissaoAdmin = async (): Promise<boolean> => {
    try {
      console.log('üîê Verificando permiss√µes de admin...');
      
      const { data: session, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError || !session.session?.user) {
        console.error('‚ùå Erro de sess√£o:', sessionError);
        return false;
      }

      const userEmail = session.session.user.email;
      console.log('üìß Email do usu√°rio logado:', userEmail);

      // Para o email espec√≠fico, sempre retorna true
      if (userEmail === 'jardsonbrito@gmail.com') {
        console.log('‚úÖ Admin confirmado pelo email hardcoded');
        return true;
      }

      // Verifica√ß√£o adicional via RPC como fallback
      try {
        const { data: adminCheck, error: adminError } = await supabase
          .rpc('is_admin', { user_id: session.session.user.id });

        if (adminError) {
          console.warn('‚ö†Ô∏è Erro na fun√ß√£o RPC is_admin:', adminError);
          // Para o admin principal, ignorar erro de RPC
          return userEmail === 'jardsonbrito@gmail.com';
        }

        console.log('‚úÖ Status admin via RPC:', adminCheck);
        return adminCheck === true;
      } catch (rpcError) {
        console.warn('‚ö†Ô∏è Falha na verifica√ß√£o RPC:', rpcError);
        // Para o admin principal, sempre permitir
        return userEmail === 'jardsonbrito@gmail.com';
      }
    } catch (error) {
      console.error('‚ùå Erro na valida√ß√£o de admin:', error);
      return false;
    }
  };

  const verificarExistenciaRedacao = async (redacaoId: string) => {
    console.log('üîç Verificando exist√™ncia da reda√ß√£o:', redacaoId);
    
    const { data, error } = await supabase
      .from('redacoes_enviadas')
      .select('id, frase_tematica, corrigida, nota_total')
      .eq('id', redacaoId)
      .single();

    if (error) {
      console.error('‚ùå Erro ao verificar reda√ß√£o:', error);
      throw new Error(`Reda√ß√£o n√£o encontrada: ${error.message}`);
    }

    console.log('‚úÖ Reda√ß√£o encontrada:', data);
    return data;
  };

  const prepararDadosCorrecao = (dados: CorrecaoData) => {
    console.log('üìù Preparando dados para corre√ß√£o:', dados);

    // Converter e validar notas
    const notas = {
      nota_c1: dados.nota_c1 ? Math.min(200, Math.max(0, parseInt(dados.nota_c1))) : null,
      nota_c2: dados.nota_c2 ? Math.min(200, Math.max(0, parseInt(dados.nota_c2))) : null,
      nota_c3: dados.nota_c3 ? Math.min(200, Math.max(0, parseInt(dados.nota_c3))) : null,
      nota_c4: dados.nota_c4 ? Math.min(200, Math.max(0, parseInt(dados.nota_c4))) : null,
      nota_c5: dados.nota_c5 ? Math.min(200, Math.max(0, parseInt(dados.nota_c5))) : null,
    };

    // Calcular nota total
    const notaTotal = Object.values(notas).reduce((sum, nota) => sum + (nota || 0), 0);

    const updateData = {
      ...notas,
      nota_total: notaTotal,
      comentario_admin: dados.comentario_admin?.trim() || null,
      corrigida: true,
      data_correcao: new Date().toISOString(),
    };

    console.log('üìä Dados preparados:', updateData);
    return { updateData, notaTotal };
  };

  const executarCorrecao = async (redacaoId: string, dados: CorrecaoData): Promise<RedacaoCorrecaoResult> => {
    try {
      console.log('üöÄ Iniciando processo de corre√ß√£o para:', redacaoId);

      // 1. Verificar permiss√µes de admin
      const isAdmin = await validarPermissaoAdmin();
      if (!isAdmin) {
        throw new Error('Acesso negado: Permiss√µes de administrador necess√°rias');
      }

      console.log('‚úÖ Permiss√µes de admin confirmadas');

      // 2. Verificar se a reda√ß√£o existe
      const redacaoExistente = await verificarExistenciaRedacao(redacaoId);
      console.log('‚úÖ Reda√ß√£o confirmada:', redacaoExistente.id);

      // 3. Preparar dados para corre√ß√£o
      const { updateData, notaTotal } = prepararDadosCorrecao(dados);

      // 4. Executar UPDATE com l√≥gica robusta
      console.log('üöÄ Executando UPDATE da corre√ß√£o...');
      
      // Primeiro, tentar o update normal
      const { data: updateResult, error: updateError } = await supabase
        .from('redacoes_enviadas')
        .update(updateData)
        .eq('id', redacaoId)
        .select('*');

      if (updateError) {
        console.error('‚ùå Erro no UPDATE:', updateError);
        throw new Error(`Erro ao salvar corre√ß√£o: ${updateError.message}`);
      }

      if (!updateResult || updateResult.length === 0) {
        console.error('‚ùå UPDATE n√£o retornou dados');
        
        // Tentar uma segunda verifica√ß√£o para ver se a reda√ß√£o ainda existe
        const { data: recheck } = await supabase
          .from('redacoes_enviadas')
          .select('id')
          .eq('id', redacaoId)
          .single();
        
        if (!recheck) {
          throw new Error('Reda√ß√£o n√£o encontrada no momento da atualiza√ß√£o');
        }
        
        throw new Error(`UPDATE n√£o afetou registros. Reda√ß√£o existe: ${recheck.id}, mas n√£o foi poss√≠vel atualizar. Verifique as pol√≠ticas RLS.`);
      }

      const resultadoFinal = updateResult[0];
      console.log('‚úÖ Corre√ß√£o salva com sucesso!', resultadoFinal);

      // 5. Verifica√ß√£o final para confirmar que foi salvo
      const { data: verificacao } = await supabase
        .from('redacoes_enviadas')
        .select('id, corrigida, nota_total, nota_c1, nota_c2, nota_c3, nota_c4, nota_c5')
        .eq('id', redacaoId)
        .single();

      if (!verificacao?.corrigida) {
        throw new Error('Corre√ß√£o n√£o foi persistida corretamente no banco de dados');
      }

      console.log('‚úÖ Verifica√ß√£o final bem-sucedida:', verificacao);

      return {
        success: true,
        notaTotal,
        redacaoId,
      };

    } catch (error) {
      console.error('üí• Erro na corre√ß√£o:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      
      return {
        success: false,
        notaTotal: 0,
        redacaoId,
        error: errorMessage,
      };
    }
  };

  return {
    executarCorrecao,
    validarPermissaoAdmin,
  };
};
