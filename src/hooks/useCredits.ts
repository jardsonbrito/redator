
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

export const useCredits = () => {
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const getCreditsbyEmail = async (email: string): Promise<number> => {
    try {
      console.log('üîç Buscando cr√©ditos para email:', email);
      
      if (!email || email.trim() === '') {
        console.log('‚ùå Email vazio fornecido');
        return 0;
      }

      const { data, error } = await supabase.rpc('get_credits_by_email', {
        user_email: email.trim().toLowerCase()
      });

      if (error) {
        console.error('‚ùå Erro ao buscar cr√©ditos:', error);
        throw error;
      }

      console.log('‚úÖ Cr√©ditos encontrados:', data);
      return data || 0;
    } catch (error: any) {
      console.error('‚ùå Erro ao buscar cr√©ditos:', error);
      return 0;
    }
  };

  const addCredits = async (userId: string, amount: number): Promise<boolean> => {
    setLoading(true);
    try {
      console.log('üí≥ Adicionando cr√©ditos:', { userId, amount });
      
      const { data, error } = await supabase.rpc('add_credits_safe', {
        target_user_id: userId,
        credit_amount: amount
      });

      if (error) throw error;

      toast({
        title: "Cr√©ditos atualizados",
        description: `${amount > 0 ? 'Adicionados' : 'Removidos'} ${Math.abs(amount)} cr√©ditos com sucesso.`
      });

      console.log('‚úÖ Cr√©ditos atualizados com sucesso');
      return true;
    } catch (error: any) {
      console.error('‚ùå Erro ao gerenciar cr√©ditos:', error);
      toast({
        title: "Erro ao atualizar cr√©ditos",
        description: error.message || "Ocorreu um erro inesperado.",
        variant: "destructive"
      });
      return false;
    } finally {
      setLoading(false);
    }
  };

  const consumeCredits = async (userId: string, amount: number): Promise<boolean> => {
    setLoading(true);
    try {
      console.log('üî• Consumindo cr√©ditos:', { userId, amount });
      
      for (let i = 0; i < amount; i++) {
        const { data, error } = await supabase.rpc('consume_credit_safe', {
          target_user_id: userId
        });

        if (error) throw error;
        console.log(`‚úÖ Cr√©dito ${i + 1} consumido. Cr√©ditos restantes:`, data);
      }

      return true;
    } catch (error: any) {
      console.error('‚ùå Erro ao consumir cr√©ditos:', error);
      return false;
    } finally {
      setLoading(false);
    }
  };

  return {
    getCreditsbyEmail,
    addCredits,
    consumeCredits,
    loading
  };
};
