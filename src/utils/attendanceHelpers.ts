import { supabase } from "@/integrations/supabase/client";

export type AttendanceStatus = 'presente' | 'ausente' | 'entrada_registrada' | 'saida_registrada';

export async function getMyAttendanceStatus(sessionId: string): Promise<AttendanceStatus> {
  try {
    // Tentar buscar email do contexto de estudante (localStorage)
    let studentEmail: string | null = null;
    
    // Primeiro tentar localStorage (sistema de estudantes)
    const userType = localStorage.getItem("userType");
    if (userType === "aluno") {
      const alunoData = localStorage.getItem("alunoData");
      if (alunoData) {
        try {
          const dados = JSON.parse(alunoData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do aluno:', e);
        }
      }
    } else if (userType === "visitante") {
      const visitanteData = localStorage.getItem("visitanteData");
      if (visitanteData) {
        try {
          const dados = JSON.parse(visitanteData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do visitante:', e);
        }
      }
    }
    
    // N√£o usar Supabase Auth para alunos, apenas localStorage

    if (!studentEmail) {
      console.warn('Nenhum email de estudante encontrado');
      return 'ausente';
    }

    console.log('üîç Verificando presen√ßa para:', studentEmail, 'na aula:', sessionId);

    // Buscar presen√ßa na tabela correta usando email e aula_id
    const { data, error } = await supabase
      .from('presenca_aulas')
      .select('status, entrada_at, saida_at')
      .eq('aula_id', sessionId)
      .eq('email_aluno', studentEmail.toLowerCase())
      .maybeSingle();

    console.log('üìä Resultado da consulta de presen√ßa:', { data, error });

    if (error) {
      console.error('‚ùå Erro ao buscar presen√ßa:', error);
    }

    // Se existe registro de presen√ßa, verificar se tem entrada e/ou sa√≠da
    if (data && data.entrada_at) {
      if (data.saida_at) {
        console.log('‚úÖ Aluno com entrada e sa√≠da registradas!');
        return 'saida_registrada';
      } else {
        console.log('‚úÖ Aluno com entrada registrada!');
        return 'entrada_registrada';
      }
    }

    console.log('‚ùå Aluno ausente ou sem registro');
    return 'ausente';
  } catch (error) {
    console.error('Error getting attendance status:', error);
    return 'ausente';
  }
}

export async function registrarEntrada(sessionId: string): Promise<void> {
  try {
    console.log('üöÄ Iniciando registro de entrada para aula:', sessionId);

    // Primeiro, vamos verificar se o usu√°rio est√° autenticado corretamente
    let studentEmail: string | null = null;
    let studentName: string | null = null;
    let studentTurma: string | null = null;

    // Tentar buscar email do contexto de estudante (localStorage)
    const userType = localStorage.getItem("userType");
    if (userType === "aluno") {
      const alunoData = localStorage.getItem("alunoData");
      if (alunoData) {
        try {
          const dados = JSON.parse(alunoData);
          studentEmail = dados.email;
          studentName = dados.nome || 'Aluno';
          studentTurma = dados.turma || 'N√£o informado';
        } catch (e) {
          console.error('Erro ao parsear dados do aluno:', e);
        }
      }
    } else if (userType === "visitante") {
      const visitanteData = localStorage.getItem("visitanteData");
      if (visitanteData) {
        try {
          const dados = JSON.parse(visitanteData);
          studentEmail = dados.email;
          studentName = dados.nome || 'Visitante';
          studentTurma = 'Visitante';
        } catch (e) {
          console.error('Erro ao parsear dados do visitante:', e);
        }
      }
    }

    if (!studentEmail) {
      throw new Error('Usu√°rio n√£o identificado. Fa√ßa login novamente.');
    }

    console.log('üîÑ Registrando entrada para:', studentEmail, 'na aula:', sessionId);

    // Tentar primeiro usar a RPC que aceita email como par√¢metro
    console.log('üîÑ Tentando via RPC registrar_entrada_email_param...');

    try {
      const { data: rpcData, error: rpcError } = await supabase.rpc('registrar_entrada_email_param', {
        p_aula_id: sessionId,
        p_email_aluno: studentEmail.toLowerCase()
      });

      console.log('üìä Resultado RPC registrar_entrada_email_param:', { rpcData, rpcError });

      if (rpcError) {
        console.error('‚ùå Erro na RPC registrar_entrada_email_param:', rpcError);
        throw rpcError;
      }

      if (rpcData === 'entrada_ok' || rpcData === 'entrada_atualizada') {
        console.log('‚úÖ Entrada registrada com sucesso via RPC!');
        return;
      }
    } catch (rpcError) {
      console.error('‚ùå Erro ao tentar RPC registrar_entrada_email_param:', rpcError);

      // Se a RPC falhou, tentar inser√ß√£o direta na tabela
      console.log('üîÑ Tentando inser√ß√£o direta na tabela...');

      try {
        // Verificar se j√° existe registro
        const { data: existingRecord } = await supabase
          .from('presenca_aulas')
          .select('*')
          .eq('aula_id', sessionId)
          .eq('email_aluno', studentEmail.toLowerCase())
          .single();

        console.log('üìã Registro existente:', existingRecord);

        const agora = new Date().toISOString();
        let result;

        if (existingRecord) {
          // Atualizar registro existente
          console.log('üîÑ Atualizando registro existente...');
          result = await supabase
            .from('presenca_aulas')
            .update({
              entrada_at: agora,
              tipo_registro: 'entrada'
            })
            .eq('aula_id', sessionId)
            .eq('email_aluno', studentEmail.toLowerCase());
        } else {
          // Inserir novo registro
          console.log('‚ûï Inserindo novo registro...');
          const recordData = {
            aula_id: sessionId,
            email_aluno: studentEmail.toLowerCase(),
            nome_aluno: studentName,
            turma: studentTurma,
            entrada_at: agora,
            tipo_registro: 'entrada'
          };

          console.log('üìù Dados a serem inseridos:', recordData);

          result = await supabase
            .from('presenca_aulas')
            .insert(recordData);
        }

        const { error, data } = result;

        console.log('üìä Resultado da opera√ß√£o direta:', { error, data });

        if (error) {
          console.error('‚ùå Erro na opera√ß√£o direta:', error);
          throw error;
        }

        console.log('‚úÖ Entrada registrada com sucesso via opera√ß√£o direta!');
      } catch (directError) {
        console.error('‚ùå Erro completo ao registrar:', directError);
        throw directError;
      }
    }
  } catch (error) {
    console.error('Error registering attendance:', error);
    throw error;
  }
}

export async function registrarSaida(sessionId: string): Promise<void> {
  try {
    console.log('üöÄ Iniciando registro de sa√≠da para aula:', sessionId);

    // Primeiro, vamos verificar se o usu√°rio est√° autenticado corretamente
    let studentEmail: string | null = null;

    // Tentar buscar email do contexto de estudante (localStorage)
    const userType = localStorage.getItem("userType");
    if (userType === "aluno") {
      const alunoData = localStorage.getItem("alunoData");
      if (alunoData) {
        try {
          const dados = JSON.parse(alunoData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do aluno:', e);
        }
      }
    } else if (userType === "visitante") {
      const visitanteData = localStorage.getItem("visitanteData");
      if (visitanteData) {
        try {
          const dados = JSON.parse(visitanteData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do visitante:', e);
        }
      }
    }

    if (!studentEmail) {
      throw new Error('Usu√°rio n√£o identificado. Fa√ßa login novamente.');
    }

    console.log('üîÑ Registrando sa√≠da para:', studentEmail, 'na aula:', sessionId);

    // Tentar primeiro usar RPC para registrar sa√≠da se existir
    try {
      const { data: rpcData, error: rpcError } = await supabase.rpc('registrar_saida_email_param', {
        p_aula_id: sessionId,
        p_email_aluno: studentEmail.toLowerCase()
      });

      console.log('üìä Resultado RPC registrar_saida_email_param:', { rpcData, rpcError });

      if (!rpcError && (rpcData === 'saida_ok' || rpcData === 'saida_atualizada')) {
        console.log('‚úÖ Sa√≠da registrada com sucesso via RPC!');
        return;
      }
    } catch (rpcError) {
      console.error('‚ùå RPC de sa√≠da n√£o encontrada ou falhou, usando opera√ß√£o direta');
    }

    // Atualizar registro de presen√ßa com hor√°rio de sa√≠da (m√©todo direto)
    const agora = new Date().toISOString();

    const { error } = await supabase
      .from('presenca_aulas')
      .update({
        saida_at: agora,
        tipo_registro: 'saida'
      })
      .eq('aula_id', sessionId)
      .eq('email_aluno', studentEmail.toLowerCase());

    if (error) {
      console.error('Erro ao registrar sa√≠da:', error);
      throw new Error(`Erro ao registrar sa√≠da: ${error.message}`);
    }

    console.log('‚úÖ Sa√≠da registrada com sucesso!');
  } catch (error) {
    console.error('Error registering exit:', error);
    throw error;
  }
}