import { supabase } from "@/integrations/supabase/client";

export type AttendanceStatus = 'presente' | 'ausente' | 'entrada_registrada' | 'saida_registrada';

export async function getMyAttendanceStatus(sessionId: string): Promise<AttendanceStatus> {
  try {
    // Tentar buscar email do contexto de estudante (localStorage)
    let studentEmail: string | null = null;
    
    // Primeiro tentar localStorage (sistema de estudantes)
    const userType = localStorage.getItem("userType");
    if (userType === "aluno") {
      const alunoData = localStorage.getItem("alunoData");
      if (alunoData) {
        try {
          const dados = JSON.parse(alunoData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do aluno:', e);
        }
      }
    } else if (userType === "visitante") {
      const visitanteData = localStorage.getItem("visitanteData");
      if (visitanteData) {
        try {
          const dados = JSON.parse(visitanteData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do visitante:', e);
        }
      }
    }
    
    // Se n√£o encontrou no localStorage, tentar Supabase Auth (fallback)
    if (!studentEmail) {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const { data: profile } = await supabase
          .from('profiles')
          .select('email')
          .eq('id', user.id)
          .single();
        studentEmail = profile?.email || null;
      }
    }

    if (!studentEmail) {
      console.warn('Nenhum email de estudante encontrado');
      return 'ausente';
    }

    console.log('üîç Verificando presen√ßa para:', studentEmail, 'na aula:', sessionId);

    // Buscar presen√ßa na tabela correta usando email e aula_id
    const { data, error } = await supabase
      .from('presenca_aulas')
      .select('status, entrada_at, saida_at')
      .eq('aula_id', sessionId)
      .eq('email_aluno', studentEmail.toLowerCase())
      .maybeSingle();

    console.log('üìä Resultado da consulta de presen√ßa:', { data, error });

    if (error) {
      console.error('‚ùå Erro ao buscar presen√ßa:', error);
    }

    // Se existe registro de presen√ßa, verificar se tem entrada e/ou sa√≠da
    if (data && data.entrada_at) {
      if (data.saida_at) {
        console.log('‚úÖ Aluno com entrada e sa√≠da registradas!');
        return 'saida_registrada';
      } else {
        console.log('‚úÖ Aluno com entrada registrada!');
        return 'entrada_registrada';
      }
    }

    console.log('‚ùå Aluno ausente ou sem registro');
    return 'ausente';
  } catch (error) {
    console.error('Error getting attendance status:', error);
    return 'ausente';
  }
}

export async function registrarEntrada(sessionId: string): Promise<void> {
  try {
    console.log('üöÄ Iniciando registro de entrada para aula:', sessionId);

    // Primeiro, vamos verificar se o usu√°rio est√° autenticado corretamente
    let studentEmail: string | null = null;

    // Tentar buscar email do contexto de estudante (localStorage)
    const userType = localStorage.getItem("userType");
    if (userType === "aluno") {
      const alunoData = localStorage.getItem("alunoData");
      if (alunoData) {
        try {
          const dados = JSON.parse(alunoData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do aluno:', e);
        }
      }
    } else if (userType === "visitante") {
      const visitanteData = localStorage.getItem("visitanteData");
      if (visitanteData) {
        try {
          const dados = JSON.parse(visitanteData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do visitante:', e);
        }
      }
    }

    if (!studentEmail) {
      throw new Error('Usu√°rio n√£o identificado. Fa√ßa login novamente.');
    }

    console.log('üîÑ Registrando entrada para:', studentEmail, 'na aula:', sessionId);

    // Teste de conectividade da tabela
    const { data: testData, error: testError } = await supabase
      .from('presenca_aulas')
      .select('count')
      .limit(1);

    console.log('üîó Teste de conectividade da tabela:', { testData, testError });

    // Verificar se j√° existe registro
    const { data: existingRecord } = await supabase
      .from('presenca_aulas')
      .select('*')
      .eq('aula_id', sessionId)
      .eq('email_aluno', studentEmail.toLowerCase())
      .single();

    console.log('üìã Registro existente:', existingRecord);

    // Usar inser√ß√£o direta na tabela ao inv√©s da RPC
    const agora = new Date().toISOString();

    const recordData = {
      aula_id: sessionId,
      email_aluno: studentEmail.toLowerCase(),
      status: 'presente',
      entrada_at: agora
    };

    console.log('üìù Dados a serem inseridos:', recordData);

    let result;
    if (existingRecord) {
      // Atualizar registro existente
      result = await supabase
        .from('presenca_aulas')
        .update({
          status: 'presente',
          entrada_at: agora
        })
        .eq('aula_id', sessionId)
        .eq('email_aluno', studentEmail.toLowerCase());
    } else {
      // Inserir novo registro
      result = await supabase
        .from('presenca_aulas')
        .insert(recordData);
    }

    const { error, data } = result;

    console.log('üìä Resultado da opera√ß√£o:', { error, data });

    if (error) {
      console.error('Erro ao inserir presen√ßa:', error);
      throw new Error(`Erro ao registrar presen√ßa: ${error.message}`);
    }

    console.log('‚úÖ Entrada registrada com sucesso!');
  } catch (error) {
    console.error('Error registering attendance:', error);
    throw error;
  }
}

export async function registrarSaida(sessionId: string): Promise<void> {
  try {
    // Primeiro, vamos verificar se o usu√°rio est√° autenticado corretamente
    let studentEmail: string | null = null;

    // Tentar buscar email do contexto de estudante (localStorage)
    const userType = localStorage.getItem("userType");
    if (userType === "aluno") {
      const alunoData = localStorage.getItem("alunoData");
      if (alunoData) {
        try {
          const dados = JSON.parse(alunoData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do aluno:', e);
        }
      }
    } else if (userType === "visitante") {
      const visitanteData = localStorage.getItem("visitanteData");
      if (visitanteData) {
        try {
          const dados = JSON.parse(visitanteData);
          studentEmail = dados.email;
        } catch (e) {
          console.error('Erro ao parsear dados do visitante:', e);
        }
      }
    }

    if (!studentEmail) {
      throw new Error('Usu√°rio n√£o identificado. Fa√ßa login novamente.');
    }

    console.log('üîÑ Registrando sa√≠da para:', studentEmail, 'na aula:', sessionId);

    // Atualizar registro de presen√ßa com hor√°rio de sa√≠da
    const agora = new Date().toISOString();

    const { error } = await supabase
      .from('presenca_aulas')
      .update({
        saida_at: agora
      })
      .eq('aula_id', sessionId)
      .eq('email_aluno', studentEmail.toLowerCase());

    if (error) {
      console.error('Erro ao registrar sa√≠da:', error);
      throw new Error(`Erro ao registrar sa√≠da: ${error.message}`);
    }

    console.log('‚úÖ Sa√≠da registrada com sucesso!');
  } catch (error) {
    console.error('Error registering exit:', error);
    throw error;
  }
}